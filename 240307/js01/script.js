// 서버 & 통신 << 필요한 이유
// todolist : 기본적 요구들
// - 기본레이아웃 정렬, dom 사용자 데이터값 수신, 의도한 화면 영역에 출력 이벤트, 사용자 수신받은 데이터 저장 기능

// 용량 큰 데이터를 사용자에게 받아서 처리해야 하는 상황이라면?

// 서버 : 사용자가 입력한 데이터를 보관,처리하는 웹 상의 가상 공간

// 프론트엔드 개발자 : 사용자 데이터 + ui 레이아웃 설계 구현

// input => id & pw
// 약속 지켜야지만 서버에게 데이터 보낼수 있고 가져올 수 있음
// 서버 통신은 규약이 존재 => 프로토콜
// https://www.naver.com
// https://www.google.com

// http :  신뢰할 수 없는 웹사이트
// 고급기능 : url

// s : security : 보안 => 보안패치 설치됨

// 서버와 통신규약을 지켰다
// 데이터를 가져오거나 전달하거나
// method : get => 서버에 특정 데이터를 요청하겠다는 의미
// method : post => 서버에 특정 데이터를 주겠다는 의미

// firebase Deploy

// 200 : 서버와의 자료 요청과 전송이 정상적으로 된 경우

// 404 : 서버에 어떤 데이터를 요청했는데 그 데이터를 찾지 못할때 서버가 알려주는 번호

// 503 : 정상적으로 서버에 데이터 요청했으나 서버가 정상적으로 작동할 수 없음을 알려주는 번호 (콘서트 예매)

// Json : Javascript Object Notation
// 자바스크립트 객체 표기법

const obj = {
  title: "title",
  price: 15000,
};

// 만약 JS 언어를 가지고 서버구현&데이터 구축 가능하다면
// 1) 프론트엔드개발 vs 백엔드개발 연봉 차이 날 이유가 없다
// 2) 태초에 JS => 웹브라우저에서만 사용할수 있도록 만든 한정적인 제약 언어
// 3) 서버 구현 & 저장 데이터 관리할 수 있도록 해주는 언어 Java & C++ || C# || C언어 << 전통적으로 서버에서 사용하는 언어들
// 4) UI

const student = {
  name: "영심이",
  major: "체육교육",
  grade: "3",
};

const json = JSON.stringify(student);

console.log(student);
console.log(json);

const json_obj = JSON.parse(student_json);

// 서버와 클라이언트가 통신규약 아래에서 통신을 한다

// AJAX : 클라이언트 & 서버간 통신을 할수 있도록 해주는 통신 기법
// Asynchronous Javascript And XML
// Asynchronous : 비동기 
// Javascript : 웹 사용가능 자바스크립트 언어
// JSON : 언어를 의미하는 것이 아니라 자바스크립트 언어<=> 서버가 이해할수 있도록 변환시켜주는 표기법 / 서버에서 가져온 데이터 <=> 웹 브라우저가 이해할수 있도록 변환시켜주는 표기법 
// XML : 과거 서버에서 실질적으로 사용할 수 있는 언어